import os
import argparse
import PIL.Image

# replace some special .bat characters with their escaped versions..
def escape_bat(string: str) -> str:
	string = string.replace('%', '%%')
	string = string.replace('^', '^^')
	string = string.replace('&', '^&')
	string = string.replace('<', '^<')
	string = string.replace('>', '^>')
	string = string.replace('|', '^|')
	return string

def map_color(h: int, s: int, v: int) -> str:
	h /= 256
	s /= 256
	v /= 256
	if v < 0.20:
		return '\x1B[30m' # black #000000
	if s < 0.25:
		if v < 0.75:
			return '\x1B[37m' # gray #C0C0C0
		else:
			return '\x1B[97m' # white #FFFFFF
	TABLE = [
		# red, yellow, green, cyan, blue, magenta
		[31, 33, 32, 36, 34, 35], # bright
		[91, 93, 92, 96, 94, 95], # dark
	]
	dark = int(v < 0.75)
	section = int(h * 6)
	code = TABLE[dark][section]
	return f'\x1B[{code}m' 

# resize an image while keeping the aspect ratio constant
def resize(image: PIL.Image.Image, new_width: int, stretch: float) -> PIL.Image.Image:
	(width, height) = image.size
	aspect_ratio = height / width
	new_height = int(aspect_ratio * new_width / stretch) 
	new_dim = (new_width, new_height)
	new_image = image.resize(new_dim)
	return new_image

# find min,max intensity pixel in entire gif
def find_dynamic_range(gif: PIL.Image.Image) -> tuple[int, int]:
	mini = 255
	maxi = 000
	nframes = 0
	while True:
		frame = gif.convert('L')
		pixels = list(frame.getdata())
		mini = min(mini, min(pixels))
		maxi = max(maxi, max(pixels))
		nframes += 1
		try: gif.seek(nframes)
		except EOFError: break
	gif.seek(0)
	return mini, maxi

# convert the whole gif image into an ascii animation
def asciify_gif(input: str, output: str, title: str, color: bool, width: int, delay: int, palette: str, stretch: float):
	with open(output, 'w') as bat:	
		gif = PIL.Image.open(input)
		nframes = 0
		mini, maxi = find_dynamic_range(gif)
		dynamic_rance = max(1, maxi - mini)

		while True:
			gif_frame = resize(gif, width, stretch)
			if color:
				gif_frame = gif_frame.convert('HSV')
				gif_pixels = list(gif_frame.getdata())
				colors = [map_color(h, s, v) for h, s, v in gif_pixels]
			gif_frame = gif_frame.convert('L')
			gif_pixels = list(gif_frame.getdata())
			pixels = [palette[(pixel - mini) * (len(palette) - 1) // dynamic_rance] for pixel in gif_pixels]
			pixels = ''.join(pixels)
			lines = [pixels[index:index+width] for index in range(0, len(pixels), width)]
			if color:
				for j, line in enumerate(lines):
					new_line = ''
					for i in range(width):
						index = j * width + i
						ansii = colors[index]
						new_line += ansii + line[i]
					lines[j] = new_line
			print('\n'.join(lines) + '\x1B[0m')
			height = len(lines)
			
			# write header
			if nframes == 0:
				bat.write(f'::--------------------------------------------------------::\n')
				bat.write(f':: This file was generated by asciify.py from {title}.gif ::\n')
				bat.write(f':: See https://github.com/blat-blatnik/asciify            ::\n')
				bat.write(f'::--------------------------------------------------------::\n')
				bat.write(f'@echo off\n')                               # don't print out every command
				bat.write(f'mode con:cols={width} lines={height+2}\n')  # set width and height of the console
				bat.write(f'title {title}\n')                           # set the title
				bat.write(f':: uncomment the line below to change the colors\n')
				bat.write(f'::color BC\n')
				bat.write(f'echo \x1B[?25l\n') # turn off the cursor
				bat.write(f':start\n')         # set a label to jump back to for looping the animation

			for line in lines:
				if line.strip() == '':
					bat.write(f'echo.\n')
				else:
					bat.write(f'echo {escape_bat(line)}\n')
			bat.write(f'echo \x1B[0m\x1B[H\n') # put cursor in top-left
			bat.write(f'call :Wait\n')  # call the wait routine so animation isn't too fast
			
			nframes += 1
			try: gif.seek(nframes)
			except EOFError: break
				
		bat.write(f'goto :start\n') # loop the animation
		# write out a 'Wait' procedure which just pings localhost in a loop..
		bat.write(f':: wait routine - you can add/remove some ping lines to make the animation faster or slower\n')
		bat.write(f':Wait\n')
		for _ in range(delay):
			bat.write(f'ping localhost -n 1 >nul\n')
		bat.write(f'exit /B 0\n') # return to caller
	
if __name__ == '__main__':
	parser = argparse.ArgumentParser(prog='asciify', description='convert a .gif file into an animated ASCII batch file', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('gif', nargs='?', default='input.gif')
	parser.add_argument('-c', '--color', action='store_true', help='color output instead of black/white')
	parser.add_argument('-w', '--width', type=int, default=80, help='output width in characters')
	parser.add_argument('-d', '--delay', type=int, default=1, help='delay between frames, each unit is approx. 5-20 ms')
	parser.add_argument('-p', '--palette', type=str, default=' .,:;+*?%S#@', help='fefine character palette from dimmest to brightest')
	parser.add_argument('-s', '--stretch', type=float, default=2, help='stretch output height by a factor')
	args = parser.parse_args()
	gif = args.gif
	filename, extension = os.path.splitext(os.path.basename(gif))
	outfile = filename + '.bat'
	asciify_gif(gif, outfile, filename, args.color, args.width, args.delay, args.palette, args.stretch)